apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: default
  labels:
    app: grafana
spec:
  selector:
    matchLabels:
      app: grafana
  replicas: 1
  template:
    metadata:
      labels:
        app: grafana
    spec:
      # initContainers:
      # Init containers are exactly like regular containers, except:
      # - Init containers always run to completion.
      # - Each init container must complete successfully before the next one starts.
      containers:
      - name: grafana
        image: grafana:{{ .Values.grafana_version | quote }}}
        resources:
          requests:
            cpu: 300m
            memory: 200Mi
          limits:
            cpu: 300m
            memory: 200Mi
        livenessProbe:
          tcpSocket:
            port: 3000
          initialDelaySeconds: 5
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
          periodSeconds: 10
        env:
        - name: GF_GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            configMapKeyRef:
              name: grafanacreds
              key: grafanapass
        - name: GF_SECURITY_ADMIN_USER
          valueFrom:
            configMapKeyRef:
              name: grafanacreds
              key: grafanauser
        - name: GF_USERS_ALLOW_SIGN_UP
          value: "false"
        ports:
        - containerPort: 3000
          name: grafana
        volumeMounts:
        - name: dashboards
          mountPath: /etc/grafana/provisioning/dashboards
        - name: datasources
          mountPath: /etc/grafana/provisioning/datasources
      volumes:
      - name: dashboards
        hostPath:
          path: grafana/dashboards
      - name: datasources
        hostPath:
          path: grafana/datasources
      - name: grafanapv
      restartPolicy: Always
